TODO QUEUE-ISH:
  + keep an *owl-library* (can have 'toplevel) and store source of definition to metadata
  + handle object naming without an intern thread
     - have a toplevel *[true-]names* which is updated by eval
     - serialize -> (serializer names) → serialize
     - write-to -> (writer names) → write-to + use it in eval.scm to render outputs
     - serialize ->  merge with render, carry a write-flag to be used with strings etc
  + decide where to store metadata and start moving tests, comments etc there:
     - (theorem-style?) tests
     - comments (automatically arguments, possibly returns, source)
     - partial eval info
  + remove the intern thread
  + decide where to store (user defined) type info. directly in constructor metadata? 
  + upgrade fixnum range to 24-56 bits
     - make sure owl/math.scm (and others) don't depend on bignum size via parser
     - change FMAX and FBITS from ovm.c
     - upgrade fx* and fxqr intermediate results to uint64_t?
     - change *fixnum-bits* and *max-fixnum* in owl/math.scm
     - grep 15, 16, #xffff, #x7fff, #x10, 3276, #b and 6553 + change accordingly
       o preferably by defining relative to *fixnum-bits*
     - take care of unexpected issues
       o have a distinct encoding for integers, or postprocess while rebalancing and -interning?
  + is it (import <thing>) or (import <thing> ...)?
  + typed bind, with size check (compile.scm has part of it)
  + case-lambda and/or something case-like should support typed deconstruction fairly natively
  + start integrating theorem checker
  + add RnRS-style records
  + show diffs in benchmark
  + switch from flat round-robin to more tree-shaped threading
  + compile a direct call to the correct function for simple known vararg function calls (+, -, ...)
  + use type bits directly in fasl encoding?
  + add user definable record type support 
     - would be nice to have some support for algebraic data types using them
     - switch the compiler to use them to make the intermediate language structure more explicit
     - would be nice to have something like:
         (match foo
            ((cons a b) ..) ; <- primitive type
            (null ...)      ; <- immediate value from env? or require '() or #null?
            ((slartibartfast fjordname length dimension) ...) ; <- record type
            (else ...))
  + check http://trac.sacrideo.us/wg/wiki/ImplementationContrasts for unintentional behavior
  + start moving R7RS functions to (scheme *)
  + add smarts to signal-halt and rename it to handle-signal
  + add ,time (sexp) to toplevel 
     > ,time (fib 100000)
     ;; evaluation took 410ms
     259740693472217241661550...
  + datum label parsing
    - battle plan: parse them to distict AST nodes and rewire after parsing
  + change load_imms in vm to have IEMPTY + support it and others in immediate load and jump instructions
  + convert red-black trees (ff.scm) to left, leaning
   + since the red position is fixed, node size of 3 will likely be unambiguous removing the need for rightness-bit
     - which is stupidly the lowest bit atm
  + rewrite ff library
     - steal left leaning trees?
  + add cgen support to variable arity functions
  + add support for variable arity in arity error messages (many now complain about desired arity 0)
  + add verbose error messages. many like common invalid operator error just give the error code.
  + core library should also provide
     - heaps
     - queues
  + add support for recursion with variable arity (recursion transformer predates variable arity)
  + rewrite rlist library, or swap to the owl version
  + split UTF-8 decoding out of sexp parser
  + rewrite macro expander
     - store free bindings in transformer
     - restore internal macro definitions 
     - use env only via (owl env) in a future-proof manner
     - check issue list, there were some other ones
  + handle gc triggering properly
  + optimize the compiler, bootstraps have gotten too slow
     - parser is too slow
  + start optimizing the math code
  + make a way to automate garden work monitoring for owl, meaning make it easy to check that a set of changes either
     - reduces code size or fasl image size, or
     - makes owl boot faster, or run some other goal task faster (e.g. math unit test, etc)
  + in general, there should be a warning when updated version is slower or boot image is more than 1% larger than the old one
  + separate module compilation and fasl-coding
  + better partial evaluation
  + reduce register set
  + use a signal other than break to start something like old MCP
  + echo foo bar baz | ol --pipe 'force s/bar // reverse' -> zab oof?
  + (read-string (write-string random-renderable)) == random-renderable (+ sharing)
  + long argument lists and register spilling
