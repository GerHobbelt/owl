TODO QUEUE-ISH:
  + finish and optimize fully lisp-side ffs
  + convert owl env to be a new ff and hunt down all abstraction violations that way?
    - or just proceed module by module
      o tough because many values flowing between modules are ffs...
  + squeeze types to <31 so that the sixth bit becomes free (high bit currently hits padding info)
    - ff nodes     (being converted)
    - raw strings  (padding)
    - byte vectors (padding)
  + remove all uses of type-old now that new type uniquely determines object type
  + convert all type-bit twiddling to use TPOS in ovm.c
  + change it to 2, leaving padding etc in headers to current position
  + move immediate payload offset from 12 to 8
  + switch fixnum size
  + fix bignum math to work with compile-time settable n-bit fixnums
     - default to 24, try out 56 and maybe later support both
  + add user definable record type support 
     - would be nice to have some support for algebraic data types using them
     - switch the compiler to use them to make the intermediate language structure more explicit
     - would be nice to have something like:
         (match foo
            ((cons a b) ..) ; <- primitive type
            (null ...)      ; <- immediate value from env? or require '() or #null?
            ((slartibartfast fjordname length dimension) ...) ; <- record type
            (else ...))
  + remove teq and deprecated type jump instructions
  + rewrite ff library
     - steal left leaning trees?
  + add cgen support to variable arity functions
  + add support for recursion with variable arity (recursion transformer predates variable arity)
  + rewrite rlist library, or swapt to the owl version
  + optimize the compiler, bootstraps have gotten too slow
     - parser is too slow
  + start optimizing the math code
  + make a way to automate garden work monitoring for owl, meaning make it easy to check that a set of changes either
     - reduces code size or fasl image size, or
     - makes owl boot faster, or run some other goal task faster (e.g. math unit test, etc)
  + in general, there should be a warning when updated version is slower or boot image is more than 1% larger than the old one
  + type battle part 2 - user defined sum/product types
     - possibly using the spare header byte below size
  + change most 65535:s to *maxrawsize* and *maxsize*
  + typed bind, with size check
  + better partial evaluation
  + reduce register set
  + use a signal other than break to start something like old MCP
  + long argument lists and register spilling
