TODO QUEUE-ISH:
  + fix bignum math to work with compile-time settable n-bit fixnums
     - default to 24, try out 56 and maybe later support both
  + convert old type-case to just switch over (type obj)
  + fix case macro to allow multiple expressions at body
  + check that wide and raw leaf string types are indeed disjoint already and drop sizeb from raw-string?
  + remove deprecated type test branch instructions and AST node handling
     - switch to plain type-based jumps everywhere now that they are disjoing
  + start integrating theorem checker
  + show diffs in benchmark
  + decide where to store metadata (likely in modules) 
     - tests
     - comments
     - types
  + add user definable record type support 
     - would be nice to have some support for algebraic data types using them
     - switch the compiler to use them to make the intermediate language structure more explicit
     - would be nice to have something like:
         (match foo
            ((cons a b) ..) ; <- primitive type
            (null ...)      ; <- immediate value from env? or require '() or #null?
            ((slartibartfast fjordname length dimension) ...) ; <- record type
            (else ...))
  + check http://trac.sacrideo.us/wg/wiki/ImplementationContrasts for unintentional behavior
  + remove teq and deprecated type jump instructions
  + start moving R7RS functions to (scheme *)
  + datum label parsing
    - battle plan: parse them to distict AST nodes and rewire after parsing
  + change load_imms in vm to have IEMPTY + support it and others in immediate load and jump instructions
  + convert red-black trees (ff.scm) to left, leaning
   + since the red position is fixed, node size of 3 will likely be unambiguous removing the need for rightness-bit
     - which is stupidly the lowest bit atm
  + rewrite ff library
     - steal left leaning trees?
  + add cgen support to variable arity functions
  + add support for variable arity in arity error messages (many now complain about desired arity 0)
  + add verbose error messages. many like common invalid operator error just give the error code.
  + core library should also provide
     - heaps
     - queues
  + add support for recursion with variable arity (recursion transformer predates variable arity)
  + rewrite rlist library, or swapt to the owl version
  + split UTF-8 decoding out of sexp parser
  + rewrite macro expander
     - store free bindings in transformer
     - restore internal macro definitions 
     - use env only via (owl env) in a future-proof manner
     - check issue list, there were some other ones
  + handle gc triggering properly
  + optimize the compiler, bootstraps have gotten too slow
     - parser is too slow
  + start optimizing the math code
  + make a way to automate garden work monitoring for owl, meaning make it easy to check that a set of changes either
     - reduces code size or fasl image size, or
     - makes owl boot faster, or run some other goal task faster (e.g. math unit test, etc)
  + in general, there should be a warning when updated version is slower or boot image is more than 1% larger than the old one
  + separate module compilation and fasl-coding
  + type battle part 2 - user defined sum/product types
     - possibly using the spare header byte below size
  + change most 65535:s to *maxrawsize* and *maxsize*
  + typed bind, with size check
  + better partial evaluation
  + reduce register set
  + use a signal other than break to start something like old MCP
  + echo foo bar baz | ol --pipe 'force s/bar // reverse' -> zab oof?
  + (read-string (write-string random-renderable)) == random-renderable (+ sharing)
  + long argument lists and register spilling
