#!/bin/sh

# a script to build owl and some related tools periodically from scratch
# and run randomized tests in the meantime.
# you probably don't want to run this.

DELAY=60        # sleep n seconds between test runs
TESTMINS=15     # minutes of random unit tests 
THEOREMS=5000   # iterations of theorem test
TIMELIMIT=3000  # max build seconds
MYDIR=$(pwd)
WORK=$HOME/ram # normally a ramdisk, don't want to wear ssds too much
EMAIL="aohelin@gmail.com"
RELATEDPROJECTS="radamsa blab lines err spektro led kal"
MD5=md5sum
echo "" | $MD5 | grep -q 68b329da9893e34099c7d8ad5cb9c940 || MD5="md5"
ME=$($MD5 < bin/builder)

die() {
   echo "$@"
   exit 1
}

fail() {
   die "ERROR: $@"
}

check_exe() {
   echo " - $1"
   test -n $(which $1) || fail "no $1"
}

notify() {
   echo "MAIL: $@"
   heirloom-mailx -S "from=Note <$(whoami)@$(hostname --long)>" -S smtp=$SMTP -s "$(echo $@)" $EMAIL
}

notify_irc() {
   NC="nc -i 4 -q 8"
   HOST=$(echo $(hostname | grep "\." || hostname --long)) # different in BSD and Linux
   uname | grep BSD && NC="nc -i 10 -w 5"
   echo "IRC: $1"
   (echo "NICK $(hostname -s)-$$\nUSER builder 8 x $(hostname -s) $HOST";
    echo "JOIN #owl-lisp";
    echo "PRIVMSG #owl-lisp :$1\nQUIT\n";) | $NC irc.freenode.net 6667 > /dev/null
}

thisgit() {
   git log | head -n 1 | sed -e 's/.* \(......\).*/\1.../'
}

confirm_or_exit() {
   echo "$@"
   read -p "yes/no? " RESPONSE
   echo $RESPONSE | grep -Eqi "^y(es)?$" || die "taking that as a no"
}

# check that user knows what this script does and really wants to run it 
# unless --really is given as first argument

test "$1" = "--really" \
   || confirm_or_exit "Owl is built with make. This script starts continuous builds and related tool tests at $WORK. Is this what you are trying to do?"

echo "My version is $ME"

renice +20 $$

echo "Checking deps:"
for DEP in nc $MD5 heirloom-mailx
do
   check_exe $DEP
done


test -f bin/builder || fail "run me at owl-lisp root"


case "$(hostname)" in 
 #haltp) 
 #  SMTP=mail.utanet.fi;
 #  DELAY=40 ;; # don't want to spin up fans here
 *)     
   SMTP=mail.panoulu.net ;
esac

date | notify "Builder.sh started on $(hostname)"
date | notify_irc "builder started on $(hostname) ($(uname), $(uname -m), $(echo $ME | dd bs=1 count=5 2>/dev/null))"

mkdir -p $WORK || die "cannot have $WORK"
cd $WORK

echo "*** GETTING SOURCES ***"
for project in owl-lisp $RELATEDPROJECTS
do
   echo " - $project"
   test -d $project || git clone https://github.com/aoh/$project.git
   cd $project && git checkout develop || echo "no develop branch for $project"
done

while true
do
	cd $WORK

	echo "Build cycle on $(date)"

	## BUILD OWL

	echo " - fresh owl build"
	cd owl-lisp
	git pull
	NEWME=$($MD5 < bin/builder)
	echo "old me $ME, new me $NEWME"
	test "$ME" = "$NEWME" || { notify_irc "I sense bin/builder has changed."; cd "$MYDIR"; git pull; exec bin/builder --really; }
	make clean >/dev/null 2>&1
	VERSION=$(thisgit)
	echo building owl
	(ulimit -S -t $TIMELIMIT; make > build.log 2>&1) || { 
		# notify on first try
		echo build failed
		test "$(cat .lastbuild)" = "$VERSION" \
			|| notify_irc "aoh, clean owl build FAILED for $VERSION on $(hostname)"
		echo "$VERSION" > .lastbuild # don't talk about this one anymore
		sleep 300;
		continue; # don't try to do the rest, owl is broken
	}
	# notify if this is a new version
	test "$(cat .lastbuild)" = "$VERSION" \
		|| notify_irc "clean owl build succeeded for $VERSION on $(hostname)"
	echo $VERSION > .lastbuild


   ## BUILD RELATEDPROJECTS 

   echo "*** BUILDING SIDE PROJECTS ***"
   for project in $RELATEDPROJECTS
   do
      mkdir -p $HOME/ram
      cd $HOME/ram
      echo " - fresh $project build"
      cd $project
      git pull
      make clean >/dev/null 2>&1
      rm -rf owl-lisp
      cp -R ../owl-lisp .
      VERSION="$project $(thisgit), owl $(cd owl-lisp && thisgit)"
      (ulimit -S -t $TIMELIMIT; make > build.log 2>&1) || {
         test "$(cat .lastbuild)" = "$VERSION" \
            || notify_irc "aoh, $project build FAILED for $VERSION: $(cat build.log | grep ERROR | head -n 1)"
         echo "$VERSION" > .lastbuild
         notify "$project build failed on $(hostname)" < build.log;
         echo "FAIL";
      }
      test "$(cat .lastbuild)" = "$VERSION" \
         || notify_irc "build success for $VERSION"
      echo "updated version to $VERSION"
      echo $VERSION > .lastbuild
   done


   ## RANDOMIZED OWL UNIT TESTS

	cd $WORK/owl-lisp
	VERSION=$(thisgit)
	echo " - running $TESTMINS minutes of randomized unit tests"
   END=$(ol -e "(+ (time) (* $TESTMINS 60))")
   while true
   do
      LEFT=$(ol -e "(- $END (time))")
      ol -t "(< $LEFT 1)" && break
      echo " - ${LEFT}s left"
      sleep $DELAY # optional, machine-specific
		(ulimit -S -t $TIMELIMIT; make random-test > test.log 2>&1) || {
         cp test.log /tmp/test-fail-$(ol -e '(time-ms)').log;
			notify "Owl random test failed on $(hostname)" < test.log;
         notify_irc "aoh, randomized test FAILED on $(hostname) using owl $VERSION";
			sleep 600;
			continue;
		}
   done

   ## THEOREM TEST ONLY 

   SEED=$(echo -n $$; bin/ol -e '(time-ms)')
	VERSION=$(thisgit)
	echo " - running theorem test for a while with seed $SEED"
	bin/ol --run tests/theorem-rand.scm --seed $SEED -n $THEOREMS &> random.log || { cp random.log /tmp; notify_irc "aoh, theorem test FAILED on $(hostname) with seed $SEED, owl $VERSION"; }

   sleep $DELAY

done

